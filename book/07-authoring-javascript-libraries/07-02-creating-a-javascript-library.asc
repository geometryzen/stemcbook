=== Creating a JavaScript Library

(((Library, Creating)))
I find it easier to create my GitHub repository first. Let's do that.

Sign into GitHub as the account that will own the library.

Select the `Repositories` tab.

Click the `New` button.

Give the repository a name. e.g. `my-lib`.

Add a `README.md` file by checking the check box.

Choose a license. `MIT` is usually a good choice.

Click the `Create repository` button. The repository will be created with a `LICENSE` file and `README.md` file.

Click the `Code` button and copy the SSH URL to the clipboard.

Open a new terminal. Navigate to the folder that you want to be the parent of your local repository folder. Clone the repository by executing a command similar to the following. Substitute your _owner_ name for _geometryzen_, and your _repository_ name for _my-lib_. 

```
git clone git@github.com:geometryzen/my-lib.git
```

Change directory to enter the repository folder.

```
cd my-lib
```

Initialize npm to create the `package.json` file using the following command:

```
npm init
```

Accept the defaults and/or make any changes. You will be able to update the values later.

Now is a good time to fire up your favorite Integrated Development Environment (IDE). Mine is Visual Studio Code.

```
code .
```

Install TypeScript as a development dependency.

```
npm i -D typescript
```

Create the `tsconfig.json` file with the command:

```
npx tsc --init
```

Modify the contents of the `tsconfig.json` file to have the following property values.

[source,json,linenos]
----
include::https://raw.githubusercontent.com/geometryzen/my-lib/main/tsconfig.json?cache_bust='{revdatetime}'[]
----

It's now time to start adding some implementation source files. Let's create the source folder and add an empty TypeScript file.

```
mkdir src
cd src
touch index.ts
cd ..
```

Modify the `index.ts` file to have the following content. This will enable us to test a thin vertical slice from our library to STEMCstudio.

[source,text,linenos]
----
include::https://raw.githubusercontent.com/geometryzen/my-lib/main/src/index.ts?cache_bust='{revdatetime}'[]
----

We'll now verify that it builds correctly by adding a script to `package.json`.

```
  "scripts": {
    "build": "tsc",
    "test": "echo \"Error: no test specified\" && exit 1"
  },

```

Now execute the following command.

```
npm run build
```

This should create a file `index.d.ts` in the `types` folder with the contents...


```
/**
 * Constructs a personalized string that can be used to greet a person.
 * @param name The name of the person receiving the greeting.
 * @returns a greeting string containing the name of the person receiving the greeting.
 */
declare function greeting(name: string): string;

export { greeting };
```

==== Module Formats and Bundling.

It's now time to install packages associated with `rollup`, define a configuration file `rollup.config.js` and wire it all together. Let's start with creating the configuration file in the project root.

```
touch rollup.config.js
```

Give this file the following contents

[source,js,linenos]
----
include::https://raw.githubusercontent.com/geometryzen/my-lib/main/rollup.config.js?cache_bust='{revdatetime}'[]
----

Install the rollup related packages

```
npm i -D @rollup/plugin-commonjs
npm i -D @rollup/plugin-node-resolve
npm i -D @rollup/plugin-typescript
```

```
npm i -D rollup-plugin-dts
```

```
npm i -D rollup-plugin-terser
```

```
npm i -D rollup-plugin-peer-deps-external
```

I'm going to change the _name_ property in _package.json_ to show how the name of the package is distinct from the name of the repository.

NOTE: If you do this and create your package under an organization like `@geometryzen` then you will have to either pay for this privilege or ensure that your package is publicly accessible.

Now lets fix up the _main_ and _types_ properties in `package.json` that are referenced from `rollup.config.js`

```
{
  "name": "@geometryzen/my-lib",
  "version": "1.0.0",
  "description": "My Library",
  "main": "dist/cjs/index.js",
  "types": "dist/index.d.ts",
  "publishConfig": {
    "access": "public"
  }
```

NOTE: Only _main_ and _types_ are normative values.

Finally, change the build script in `package.json` to read

```
"build": "rollup -c"
```

Let's give our bundled build a try...

```
npm run build
```

The `dist` folder should now contain subfolders for the formats `cjs`, `esm`, `system`, and `umd`. Each of those folders should contain at least an `index.js` file, which is the bundled implementation. The `dist` folder should also contain an `index.d.ts` file, which is our bundled type definitions.

==== Unit Testing

Testing your library is always a good idea. However, depending upon the nature of your library, the payback from automatic testing may vary. In general, JavaScript resources that don't use the Document Object Model (DOM) are easier to test. Code that does use the DOM can be tested using various test runners or DOM simulators, but may benefit from manual visual inspection of the output. In this example we will assume that the testing required does not involve the DOM.

Our testing approach will be to use _Jest_ as our test runner and assertion library.

Install the following dependencies:

```
npm i -D jest
npm i -D @types/jest
npm i -D ts-jest
npm i -D ts-jest-resolver
```

Create the folder that will contain our tests.

```
mkdir tests
```

Now let's add the configuration file for _Jest_ which is called _jest.config.js_:

```
touch jest.config.js
```

And here are the contents of _jest.config.js_:

[source,json,linenos]
----
include::https://raw.githubusercontent.com/geometryzen/my-lib/main/jest.config.js?cache_bust='{revdatetime}'[]
----

Change the _package.json_ script for _test_ to read:

```
"test": "jest"
```

And now you can run your unit tests with the command:

```
npm run test
```

==== Coverage

A report of what you have tested and to what extent is called a coverage report. It is important because it will help you decide where you need to add testing before refactoring or simply to improve confidence in your code.

Add a script to the _package.json_ to create the coverage report when the tests are run:

```
"coverage": "npm run test -- --coverage"
```

And now you can obtain a coverage report with the command:

```
npm run coverage
```

==== Documentation

```
npm i -D typedoc
npm i -D trash
npm i -D open-cli
```

```
touch typedoc.json
```

[source,json,linenos]
----
include::https://raw.githubusercontent.com/geometryzen/my-lib/main/typedoc.json?cache_bust='{revdatetime}'[]
----

Add a script to the _package.json_ to create the documentation:

```
"docs": "npm run docs:typedoc && open-cli docs/index.html",
"docs:typedoc": "trash docs && typedoc --options typedoc.json",
```

And now you can create documentation with the command:

```
npm run docs
```

The coverage report is an HTML page, _index.html_, that can be found in the _coverage_ folder.

==== GitHub Pages

It would be nice to deploy our documenttaion to the web so that others can read it. For this we will use a tchnology called GitHub Pages.

Install the utilty that will transfer our documentation to GitHub.

```
npm i -D gh-pages
```

Add a script to _package.json_:

```
"pages": "npm run docs:typedoc && gh-pages -d docs"
```

Try it out:

```
npm run pages
```

The documentation should be visible at `https://owner.github.io/repo`.

==== Linting

```
npm i -D eslint
```

```
npm i -D @typescript-eslint/eslint-plugin
npm i -D @typescript-eslint/parser
```

_.eslintignore_

```
touch .eslintignore
```

[source,text,linenos]
----
include::https://raw.githubusercontent.com/geometryzen/my-lib/main/.eslintignore?cache_bust='{revdatetime}'[]
----

_.eslintrc_

```
touch .eslintrc
```

[source,text,linenos]
----
include::https://raw.githubusercontent.com/geometryzen/my-lib/main/.eslintrc?cache_bust='{revdatetime}'[]
----

Add a script to _package.json_:

```
"lint": "eslint . --ext .ts"
```

Try it out:

```
npm run lint
```

==== Finishing Touches

I'll add the following two scripts to _package.json_:

```
"dev": "rollup -c -w",
"pretest": "npm run build",
"prepublishOnly": "npm run build && npm run test && npm run lint && npm run pages",
```

Here is the complete _package.json_ file:

[source,json,linenos]
----
include::https://raw.githubusercontent.com/geometryzen/my-lib/main/package.json?cache_bust='{revdatetime}'[]
----

==== Integration Testing

How can we test our library before actually publishing it to _npm_?

We will make use of the _npm link_ command to create symbolic links.

See _https://github.com/geometryzen/my-app_ for a test harness example.

==== Publishing to npm

We're now almost ready to publish.

We use the _.npmignore_ file to control what artifacts are published to npm.

Create the _.npmignore_ file in the root of your project.

```
touch .npmignore
```

The _npm pack_ command is used to pack a _tarball_ that contains the artifacts in your project. The following command can be used to inspect the artifacts that will be published to npm without actually creating a _tarball_ file. 

```
npm pack --dry-run
```

The contents of your _.npmignore_ file should look something like:

[source,ts,linenos]
----
include::https://raw.githubusercontent.com/geometryzen/my-lib/main/.npmignore?cache_bust='{revdatetime}'[]
----

Publish your package to _npm_ using the command:

```
npm publish
```

==== Consuming the Library

The published package contains four bundled JavaScript files and one TypeScript type definition file:

```
https://unpkg.com/@geometryzen/my-lib@1.0.0/dist/cjs/index.js
```

```
https://unpkg.com/@geometryzen/my-lib@1.0.0/dist/esm/index.js
```

```
https://unpkg.com/@geometryzen/my-lib@1.0.0/dist/system/index.js
```

```
https://unpkg.com/@geometryzen/my-lib@1.0.0/dist/umd/index.js
```

```
https://unpkg.com/@geometryzen/my-lib@1.0.0/dist/index.d.ts
```

Therefore, the _system.config.json_ file in your STEMCstudio project should contain one of the JavaScript files:

[source,json,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/cbfe438dfe3c91b6e81a4d4a8358545c/raw/system.config.json?cache_bust='{revdatetime}'[]
----

And the _types.config.json_ file in your STEMCstudio project should reference the _index.d.ts_ file. 

[source,json,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/cbfe438dfe3c91b6e81a4d4a8358545c/raw/types.config.json?cache_bust='{revdatetime}'[]
----

Finally, importing and using a JavaScript resource in your STEMCstudio project will look like:

[source,ts,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/cbfe438dfe3c91b6e81a4d4a8358545c/raw/index.ts?cache_bust='{revdatetime}'[]
----



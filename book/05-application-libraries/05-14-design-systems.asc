=== Design Systems with FAST

A _Design System_ is an approach to user interface construction that strives to achieve consistency, high quality, accessibility, and a modern user experience. How this has been done has varied over the years, but the most recent and most promising implementations are constructed using Web Components.

We'll take a look at the _FAST_ Design System, developed by Microsoft, and see how it can be incorporated into a STEMCstudio application.

As described on the FAST Home Page, https://www.fast.design, the FAST libraries provide both off-the-shelf components as well as tools for building your own web components. In this section we'll look at consuming pre-built FAST Web Components. This will also allow us to see how some technical issues concerning external ES6 modules are overcome.

==== Consuming FAST Components

The example we will use is the application, https://www.stemcstudio.com/gists/8c813aa7de07734c48d01c06a2563cde

In the HTML file, we can use the names of pre-built FAST Web Components. See the FAST documentation for the full range of components available:

[source,html,linenos]
._index.html_
----
include::https://gist.githubusercontent.com/stemcstudio/8c813aa7de07734c48d01c06a2563cde/raw/index.html?cache_bust='{revdatetime}'[]
----

For a Web Component to be _upgraded_ we must ensure that it has been registered as a custom element with the _window_ object. In _FAST_, we do this by registering with the design system. In this example we also attach a listener to the `Switch` so that we can toggle dark and light modes.

[source,ts,linenos]
._index.ts_
----
include::https://gist.githubusercontent.com/stemcstudio/8c813aa7de07734c48d01c06a2563cde/raw/index.ts?cache_bust='{revdatetime}'[]
----

In the FAST documentation it suggests that the FAST implementation can be loaded as a script element. Loading the module as a script element will certainly result in the custom components being registered but it will not give us programmatic access to the design system. This is because the module will be loaded in ES6 module format and will not be available to our `System` loader. So instead we take the following approach of defining dependencies. We add the dependency for '@microosoft/fast-components' to the project so that it becomes an entry in the 'dependencies' property in 'package.json':

[source,json,linenos]
._package.json_
----
include::https://gist.githubusercontent.com/stemcstudio/8c813aa7de07734c48d01c06a2563cde/raw/package.json?cache_bust='{revdatetime}'[]
----

STEMCstudio recognizes the '@microsoft/fast-components' package and defines an override in 'studio.config.json':

[source,json,linenos]
._studio.config.json_
----
include::https://gist.githubusercontent.com/stemcstudio/8c813aa7de07734c48d01c06a2563cde/raw/studio.config.json?cache_bust='{revdatetime}'[]
----

STEMCstudio then generates 'system.config.json' to have the correct information for runtime behavior:

[source,json,linenos]
._system.config.json_
----
include::https://gist.githubusercontent.com/stemcstudio/8c813aa7de07734c48d01c06a2563cde/raw/system.config.json?cache_bust='{revdatetime}'[]
----

NOTE: You'll notice that there is something strange going on here. The `@microsoft/fast-components` module is being mapped to a file from the `@geometryzen/fast-components` package. We're replacing an _ES6_ module format with a _System_ module format. How this works is covered in the Appendix. 

We also map the TypeScript typedefinitions as follows in _types.config.json_:

[source,json,linenos]
._types.config.json_
----
include::https://gist.githubusercontent.com/stemcstudio/8c813aa7de07734c48d01c06a2563cde/raw/types.config.json?cache_bust='{revdatetime}'[]
----

NOTE: If we had only mapped the `@microsoft/fast-components` module then we would find that parts of the API are incompletely defined. For example, we map `@microsoft/fast-foundation` module so that the `DesignSystem` type is defined. We also map `@microsoft/fast-element` so that the `Switch` type is completely defined.

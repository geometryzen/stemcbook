=== Programming API

STEMCstudio provides an Application Programming Interface (API) that allows you to access the following LTI services:

Assignments and Grades Service, and
Names and Roles Service.
Interaction with these services from your STEMCstudio application happens through the 'stemcstudio-tunnel' package. This package provides abstractions that represent the Gradebook, the User, and the Cohort defined by the users' registration in a course. For example, following the selection of `stemcstudio-tunnel` as a dependency, the following import makes these services available as objects:


```
import { gradebook, cohort, user } from 'stemcstudio-tunnel'
```

```
async function getItems() {
    try {
        const response = await gradebook.getItems()
    } catch (e) {
        console.warn(`${e}`)
    }
}
```

```
async function createItem() {
    const itemdef: Omit<Item, 'id'> = {
        scoreMaximum: 100,
        label: 'My New Item'
    }
    try {
        const item = await gradebook.createItem(itemdef)
    } catch (e) {
        console.warn(`${e}`)
    }
}
```

```
async function submitScore() {
    try {
        const comment = await user.prompt(
            { 
                title: 'Submit Score',
                message: 'Please add a comment.',
                text: 'This is outstanding work!',
                label: 'comment',
                hint: ""
            })
        if (gradebookItems.length > 0) {
            const score: Score = {
                scoreGiven: Math.random(),
                scoreMaximum: 1,
                activityProgress: 'Completed',
                gradingProgress: 'FullyGraded',
                comment
            }
            try {
                await gradebook.submitScore(gradebookItems[0].id, score)
            } catch (e) {
                console.warn(`${e}`)
            }
        }
    } catch (e) {
        console.warn(e)
    }
}
```

```
async function getResults() {
    if (gradebookItems.length > 0) {
        const results = await gradebook.getResults(gradebookItems[0].id)
    }
}
```

```
async function getMembers() {
    try {
        const response = await cohort.getMembers()
        for (const member of response.members) {
            console.log(`${member.name} ${JSON.stringify(member.roles)}`)
        }
    } catch (e) {
        console.warn(`${e}`)
    }
}
```
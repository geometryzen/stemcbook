=== Writing and Calling Internal Modules

In STEMCstudio, modules are files in your project that export JavaScript resources such as classes, functions and variables, and TypeScript-specific resources such as types and interfaces.

Modules provide a way to organize your code into separate concerns while controlling what you expose to other modules. This is important for ensuring the maintainability of your code as it grows in complexity.

STEMCstudio modules follow the ECMAScript ES6 modules specification exactly, so I won't repeat the specification or the many good tutorials on the web. The only thing that you do need to know is how STEMCstudio handles module names and a small thing to be aware of concerning the defaulting of JavaScript extensons.

==== Module Names

In STEMCstudio you will be writing your code as TypeScript and your files will have the _.ts_ extension. But the browser runtime uses JavaScript files, so we need to known how a TypeScript file that contains the source code for a module is named as a JavaScript module.

*In STEMCstudio, a file called _foo.ts_ that is the source for a module becomes a JavaScript file with the module name `./foo.js`.*

NOTE: Incidentally, any file that uses the `export` keyword is treated as a module.

Suppose that you have a file called _foo.ts_ that exports a function:

[source,ts,linenos]
._foo.ts_
----
include::https://gist.githubusercontent.com/stemcstudio/6afb8c2ee945137c097b6bbea7618d93/raw/foo.ts?cache_bust='{revdatetime}'[]
----

To import the function from the file _foo.ts_ you would use the _import specification_ syntax:

[source,ts,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/6afb8c2ee945137c097b6bbea7618d93/raw/index.ts?cache_bust='{revdatetime}'[tag=import]
----

TIP: If you press the keys _Ctrl+Spacebar_ while the cursor is within the curly braces of your import specification, STEMCstudio will provide a pick list of available remaining imports.

==== Defaulting of JavaScript Extensions

WARNING: If you do not provide the JavaScript extension for the internal module name, it *MAY* work, but is not guaranteed to do so in future.

For example, suppose you import using the syntax:

```
import { greeting } from "./foo" 
```

The legacy behavior of STEMCstudio is to default a JavaScript extension if one is not provided. You will not get an error from the STEMCstudio IDE at design time. 



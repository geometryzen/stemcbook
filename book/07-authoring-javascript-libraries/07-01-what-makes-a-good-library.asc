=== What makes a good JavaScript library?

==== Smart Editor Support using Type definitions

We would like the consumer of the library to be supported with smart editor features such as type checking and autocompletion.
We will accomplish this by shipping a type definition file, `index.d.ts` with our library that contains TypeScript type
definitions for our JavaScript library. Furthermore, we will generate this file so that it always stays synchronized with the
implementation code.

==== Documentation Generation

We would like to provide the consumer of the library with web pages that describe the consumption of the library in detail.
We will automatically generate the documentation from the code and make it available as GitHub pages.

==== Comprehension depends on Implementation Language

We would like the maintainers of the library to be able to easily understand the implementation code whether they are the original
author or not, and even if some time has elapsed since the code was written. The best practice for doing this is to use TypeScript
rather than JavaScript as the implementation language. TypeScript is easily learned because it is simply JavaScript with additional type information sprinkled on top. Utilities exist for automatically stripping the type information to reveal the executable JavaScript code.

==== Reliability aided by Automated Testing

We would like the maintainers of the code to be able to easily run test suites to verify the integrity of the code. Our test runner of choice will be `mocha` because it is agnostic as to the assertion framework. We will use `chai` as the assertion framework and library because it provides a choice of several assertion styles. We will also add coverage testing so that we can see what has been tested.

==== Module Formats and Code Bundling

There is a gradual move to composing libraries from EcmaScript modules (ESM), and often with many files. While this provides opportunity for tree-shaking in applications, some consumers will benefit from bundled code in particular formats. We will offer several formats; `ESM`, `UMD`, and `System``. STEMCstudio is able to consume any of these formats as long as they are bundled. STEMCstudio uses the `System` format for execution and so this is the most efficient way to consume your library in STEMCstudio. Our choice of bundler will be `rollup`. Another popular choice is `webpack`, but this tends to be used more for web applications, with rollup being used for libraries.

==== Bundling Types

STEMCstudio requires the type information to be bundled into one file. We will do this automatically using a rollup plugin.

==== Publishing and Consumption

We would like our library to be readily available for download from a Content Delivery Network. We will use `https://unpkg.com` for that purpose. Simply publishing our library to `npm` will make it available on this CDN. STEMCstudio can then pull in the implementation code and the type definitions by specifying their URLs in your STEMCstudio application. The consumer gets to choose the version of the library that
is appropriate for their application.

==== Shared Dependencies

We would like to make sure that if our library depends on another library that we can choose whether to bundle that dependency or leave the choice of dependency version to the application developer. The latter is usually preferable for reducing code bloat. We will achieve this using the `peerDependencies` feature in our `package.json` file.
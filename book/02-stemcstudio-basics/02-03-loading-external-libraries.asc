=== Loading External Libraries

External Libraries are JavaScript code that have been authored by some organization, or yourself, and that can be executed in STEMCstudio.
Such libraries are either already known to STEMCstudio, and have bespoke code for loading them easily, or are unknown, in which case you are responsible for making the library accessible to STEMCstudio.

Increasingly, as standards for JavaScript modules mature and become more widely implemented, and as TypeScript type definitions become shipped and synchronized with the JavaScript implementation version, the majority of libraries will not be defined apriori in STEMCstudio. This will
also be the case if you decide to author your own library for inclusion in STEMCstudio and elsewhere. 

NOTE: Chapter 7 provides concrete help and best practices for authoring a JavaScript library.


==== Loading an External Library using explicit Configuration

The first step to incorporate an external library is finding out where it is deployed and how the various library artifacts are stored
in that deployment. We'll use the term Content Delivery Network (CDN) for a server that stores library artifacts and makes them available over the web using a URL.

The de-facto standard for advertising a JavaScript library is for the author to publish it to `npm`, the Node Package Manager. Don't be misled by the name, many packages are defined in npm even if there is no intention of using the library in Node.JS.

NOTE: There have been other package managers for JavaScript that are explicitly intended for the Browser rather than Node. e.g. Bower. However, these appear to have fallen out of favor and `npm` is the de-facto standard.

We'll assume that the library that you intend to use has been published to `npm` as a package, and that you know the package name. If not, you may need to contact the library author to get details about the library for consuming it.

The information that we need about a library includes its name, available versions, available JavaScript module formats, the URL path to the bundled JavaScript implementation and the URL for the TypeScript definitions.

Navigating to `https://www.npmjs.com` in a web browser will bring you to the `npm` search page. Enter the desired package name, or other known descriptive details, to find the package. The author may have provided the information you require in human-readable text on the package home page. Another way you can find the information is to make use of the `package.json` file that accompanies every library that is published to npm. For example, if the Repository where the source code is located in provided in `npm`, you can navigate to that repository and find the `package.json` file in the root of the project.

The `package.json` file should contain some properties that may look like the following

```
"browser": "dist/umd/index.js",
"main": "dist/cjs/index.js",
"module": "dist/esm/index.js",
"system": "dist/system/index.js",
"types": "dist/index.d.ts",
```

These properties indicate the various formats that are available and where the artifacts can be located relative to the project root.

NOTE: Other than `"main"` and `"types"`, these properties do not appear to be normative. Other standards have also emerged for describing the public `"exports"` of a library. The `"main"` property refers to an entry point JavaScript file in CommonJS format for use on Node and so we are not interested in that; the format is incorrect.

The `"types"` property refers to the TypeScript type definitions that we do want to use. STEMCstudio is able to consume JavaScript in the Univesal Module Definition format, `umd`, the EcmaScript module format, `esm`, and the System Register format, `system`. In all cases the code should have been bundled.

So, we have reverse engineered the relative locations of various artifacts! But what about the base URL where the project is stored? The good news is that any package deployed to `npm` is automatically available on a CDN at `https://unpkg.com`, and the path to an artifact has the form `https://unpkg.com/name@version/path/to/artifact.ext`.

Let's see how these URLs are used in configuration files `system.config.json` and `types.config.json` STEMCstudio.

NOTE: If you don't see these files in the Explorer Files list then it could be that configuration files are being hidden. This behavior can be controlled through the Hide Configuration Files option in Project Settings.

STEMCstudio uses a file called `system.config.json` to define the mapping from a bare module reference to a JavaScript implementation:

```
{
    "map": {
        "my-lib": "https://unpkg.com/@geometryzen/my-lib@1.0.0/dist/umd/index.js"
    }
}
```

STEMCstudio uses a file called `types.config.json` to define the mapping from a bare module reference to a TypeScript type definition file:

```
{
    "map": {
        "my-lib": ["https://unpkg.com/@geometryzen/my-lib@1.0.0/dist/index.d.ts"]
    }
}
```

WARNING: Notice that the URL value in the `types.config.json` is an array of URL strings, whereas in the `system.config.json` it is a single URL string.

NOTE: Some points worth noting: STEMCstudio can consume the `system` format directly, but it is rare for library authors to distribute this format. The `umd` format is encountered frequently and can be consumed with a low overhead by being converted to the `system` format. The `esm` format can be consumed by STEMCstudio but this involves the small overhead of transpiling to the `system` format. 

To use an external library in the `esm` module format you will need to make TypeScript available to the `System` loader. To do this, add the following script tag near the bottom of the head tag in `index.html`.

```
<script src='https://stemcstudio.com/vendor/typescript@4.4.0/typescript.js'></script>
```

==== Loading an External Library by selecting a Dependency in Project Settings

Loading an external library by selecting a dependency is considerably easier than explicitly configuring the maps from a bare module reference to JavaScript code and TypeScript definitions.

Open the Project Settings dialog, image:images/icons/icon-project-settings.png[].

Select the version of the package that you want as a dependency in the first dropdown list.

[#package-version-selection]
.Package Selection in Project Settings
image::book/02-stemcstudio-basics/images/package-version-selection-in-project-settings.png[]

You may override the Upgrade option for the package in the second dropdown list.

[#package-upgrade-selection]
.Package Selection in Project Settings
image::book/02-stemcstudio-basics/images/package-upgrade-selection-in-project-settings.png[]

The meaning of the Uprade options are as follows:

[width="100%"]
|=======
| Upgrade | STEMCstudio runtime behavior
| Minor   | May select a version with a higher minor version number.
| Patch   | May select a version with a higher patch version number.
|         | Will use the exact version number specified. 
| Latest  | May select a version with a higher major version number.
|=======

The dependencies available in Project Settings can be considered a legacy feature or a convenience when the configuration is not simple. It will usually be more future-proff to explicitly configure an external dependency yourself.
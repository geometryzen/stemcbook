=== How It Works

Understanding how STEMCstudio works will enable you to consume external libraries, author external libraries for consumption by STEMCstudio, optimize performance, and resolve issues that inevitably arise.

==== Minimal Application Example

We'll use, as an example, an application that results from using the minimal template to create a new project. If you have access to your computer, create such a project and follow along as we walk through it. Make changes to check your understanding of what is going on.

Every web application has, at its core, an HTML file that is loaded by the browser. The source code for the HTML file, _index.html_, in this example is rather unremarkable and doesn't look like it will do anything dynamic.

[source,html,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/03416e6ee657ca0f8835a48787b3f9ca/raw/index.html?cache_bust='{revdatetime}'[]
----

About all we can surmise from this file is that it is going to bring in the _style.css_ from the project.

Let's take a look at the _index.ts_ file.

[source,ts,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/03416e6ee657ca0f8835a48787b3f9ca/raw/index.ts?cache_bust='{revdatetime}'[]
----

This certainly looks like the code that produces the behavior of the application. It finds the element with a particular identifier in _index.html_ and changes the text content. But how does this file get loaded?

There's an underlying rule in STEMCstudio that a file called _foo.html_ will try to load a file called _foo.js_. If you know anything about TypeScript it is that browsers execute JavaScript and there exists a transpiler that can convert the TypeScript _index.ts_ to JavaScript _index.js_. Every time you make a change to your TypeScript files, STEMCstudio will be transpiling them to JavaScript in the background.

So now we need to know how all of this gets loaded into the browser. STEMCstudio is a little different from other live coding environments in that all the processing is taking place in the browser. This is by design. If all the processing takes place in the browser then we avoid the problems of scaling with the number of users which would otherwise require us to spin up costly virtual machines in the cloud.

You may also know that web development often requires you to run a local web server because the browser isn't allowed to load resources using the file protocol. So how does STEMCstudio do it? The solution is that STEMCstudio converts all JavaScript files to a special module format called _system_ and then bundles all the resources it needs, including few extra bootstrapping scripts, into a single string that the browser can load. It loads the bundled code into an _iframe_ element. This is all happening in memory so it's not obvious how to see directly what is going on. However, there are two things we can do to peek behind the curtain.

One approach is to open the developer console in your browser and inspect the elements. You should be able to find something like this:

```
<iframe id="...">
#document
    <html lang="en">...</html>
</iframe>
```

Another approach is to know that STEMCstudio creates a cache of this bundled content into a file called _generated.index.html_. So if you save your project to a GitHub Gist (after it has been launched) then you can inspect this file in GitHub. Here's what it looks like in this example.  

[source,html,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/03416e6ee657ca0f8835a48787b3f9ca/raw/generated.index.html?cache_bust='{revdatetime}'[]
----

The first thing to notice is that STEMCstudio has added a _script_ to the _head_ element that loads a JavaScript file called _system.js_. The _system.js_ file creates a global object called `System` which is known as the module loader.

The second thing to notice is that the _index.ts_ file has been transpiled and wrapped in a `System.register` function call. This makes the transpiled contents of _index.ts_ knwon to the `System` module loader.

Further down you will see a `System.import` function call. This invocation executes the module that is referred to by name.

And that's the essence of how it works in the most simple case.

Let's now see how STEMCstudio loads the external library with bare module reference `my-lib`.

==== Importing External Libraries.

You may have noticed that the _generated.index.html_ file contains a _script_ tag with a `System.config` call. This configuration defines how bare module references are mapped to external URLs. The content for this configuration comes from the `system.config.json` file in our project: 

[source,json,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/03416e6ee657ca0f8835a48787b3f9ca/raw/system.config.json?cache_bust='{revdatetime}'[]
----

There's more to using external libraries than the runtime aspects that have been described here. We will also be concerned with how the TypeScript type definitions are loaded as these impact the Developer Experience. We'll cover those design-time aspects in the next section.

==== Cascading Style Sheets

Notice that the contents of the project _style.css_ file have been inlined as a _style_ tag in _generated.index.html_ at exactly the point in _index.html_ where there was a _link_ tag.

=== 2D Diagramming with JsxGraph

[#jsxgraph-midpoint-quadrilateral]
.JsxGraph being used to demonstrate a Euclidean theorem
image::book/05-application-libraries/images/jsxgraph-midpoint-quadrilateral.png[width=500,height=500]

JsxGraph is desribed as a JavaScript library for interactive geometry. It is known especially for 2D rendering but can also render in 3D. The underlying rendering technology is pluggable but the most common technology used is Scalable Vector Graphics (SVG). The programming API consists of defining geometric elements, usually starting with points, and connecting them together to create geometric constructions. JsxGraph is able to render diagrams as well as text. JsxGraph is also an excellent utility for constructing specialized diagrams e.g. mechanics, electronics, and electrodynamics.


[#jsxgraph-ball-on-spring]
.JsxGraph being used to render a Ball on a Spring Physics Simulation
image::book/05-application-libraries/images/jsxgraph-ball-on-spring.png[width=500,height=500]

==== Using JsxGraph in STEMCstudio

The starting point for using JsxGraph in STEMCstudio is to ensure that `jsxgraph` exists as a dependency in your project `package.json` file. You can either add this dependency manually be directly editing the `package.json` file or by using the image::icon-new-dependency.svg[] (Add Dependency) button above the explorer view.

[source,json,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/77d2457de4f821e2b4b54abd64eda9b6/raw/package.json?cache_bust='{revdatetime}'[]
----

It is common to define a `div` HTML tag in your `index.html` file as a placeholder for the creation of the `Board`.

[source,html,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/77d2457de4f821e2b4b54abd64eda9b6/raw/index.html?cache_bust='{revdatetime}'[]
----

NOTE: The `jxgbox` class is defined in the `jsxgraph.css` file in the JsxGraph distribution.

TIP: The JsxGraph distribution provides a `jsxgraph.css` file with pre-defined Cascading Stylesheet Styles. This is optional but a useful starting point. Include the file by using a `link` HTML tag as shown.

You are now ready to begin coding your JsxGraph construction. The following example demonstrates the use of the programming API.

[source,ts,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/77d2457de4f821e2b4b54abd64eda9b6/raw/index.ts?cache_bust='{revdatetime}'[]
----

==== Maintaining the version of JsxGraph in your project.

Over time, you may wish to upgrade the version of JsxGraph that is being used by your project.

You should be aware that adding `jsxgraph` as a dependency to your `package.json` file caused an override entry to be created in your `studio.config.json` file:

[source,json,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/77d2457de4f821e2b4b54abd64eda9b6/raw/studio.config.json?cache_bust='{revdatetime}'[]
----

The override stipulates that the runtime implementation should come from the `@geometryzen/jsxgraph` wrapper (which provides a `system` module format) while the type definitions should come from the original `jsxgraph` package. Using the `jsxgraph` package, you are responsible for maintaining both the `package.json` file dependency as well as the `studio.config.json` override.

==== JXG Global Variable or ES6 Module Syntax

You have a choice in how you consume the JsxGraph library. This is because the JsxGraph library is bundled in a format called the Universal Module Definition (UMD). If you consume the library as a global variable then the variable name is _JXG_ and it lives in the _window_ namespace. Your code will look like this:

[source,ts,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/7f65964e26fe3359e13d0335b0430432/raw/index.ts?cache_bust='{revdatetime}'[]
----

TIP: To see the JavaScript resources that you can use from the _JXG_ namespace, type a period after the _JXG_ symbol.

[#stemcstudio-context-assist]
.STEMCstudio Context Assist
image::images/editor/stemcstudio-context-assist.png[]

If you consume the library using ES6 Module Syntax then your code will look like this:

[source,ts,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/4acc3d7db9826ff782211b314f0edb37/raw/index.ts?cache_bust='{revdatetime}'[]
----

TIP: To see the JavaScript resources that you can import from the _jsxgraph_ module, type a comma after the _JSXGraph_ symbol inside the curly braces of the _import_ statement and press the _Ctrl+Spacebar_ keys.

[#stemcstudio-import-help]
.STEMCstudio Import Help
image::images/editor/stemcstudio-import-help.png[]

The choice as to whether you use the global _JXG_ variable or ES6 Module Syntax is most likely going to be determined by your execution environment. For example, if you are using a legacy LMS plugin architecture then most likely JsxGraph will be available as the global _JXG_ variable. Otherwise you should default to the more flexible ES6 Module Syntax and runtime architecture.

==== The overloaded _Board.create_ method and pitfalls when using TypeScript

The _create_ method of the _Board_ class is overloaded to return different types according to the _elementType_ parameter. Additionally, the second _parents_ parameter may allow more than one type, and the optional third parameter usually has property names which are case-insensitive.

Frequently, a developer may report that the code runs correctly but the editor can't help with the semantic checking.

Let's look at a concrete example:

[#jsxgraph-board-create-overloaded-issue]
.JsxGraph Board.create overloaded issue
image::book/05-application-libraries/images/jsxgraph-board-create-overloaded-issue.png[]

What is going on here?

We see that the developer intent is to create a _JXG.Point_ instance, but the editor is confused and can only establish the general return type of the _create_ method. The problem is difficult to spot.

If we break up the _JXG.Point_ construction into two lines then the cause becomes apparent:

[#jsxgraph-board-create-debug]
.JsxGraph Board.create debugging
image::book/05-application-libraries/images/jsxgraph-board-create-debug.png[]

The property name _withlabel_ is incorrect and should be _withLabel_ (according to the TypeScript type definitions). The code runs correctly because the runtime allows case insensitivity in the property names. But at design time, the difference is sufficient to throw off the matching that establishes the return type. There is a trade-off going on here. If the typing of the _create_ method is very lax then it can be made to match based on the _elementType_ parameter, but the definitions will not provide useful information on the second and third parameters. If the typing of the _create_ method is exhaustive then it will not match when there are common mistakes.  

I believe the pragmatic solution is to proceed by breaking the construction into multiple lines, as in the previous example. In this case you will get more help for the third _attributes_ parameter.  
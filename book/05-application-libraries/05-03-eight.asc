=== 3D Graphics with Eight

When we think of 3D Graphics, we are normally referring to a high performance processing pipeline that takes advantage of the parallel processing of the Graphics Processor Unit (GPU). An example of this is _WebGL_. The _WebGL_ API is very low level and not very practical for most STEM education needs where the desire is to use common geometric objects to render scenes. Higher level APIs are available in JavaScript libraries that hide the implementation details of WebGL and provide suitable abstractions for building 3D scenes.

While the `three` package (https://www.npmjs.com/package/three) is well known and provides more than adequate functionality for rendering 3D graphics, an alternative is available that is designed to be more suitable for educational purposes. This package is called `davinci-eight`. The core ideas behind this package are:

* Uniform representation of position and attitude using Geometric Algebra. This avoids the ad-hoc approaches to rotations based on Euler angles and quaternions.
* Written in TypeScript with generated type definitions. The type definitions are guaranteed to be accurate and the library code is easier to maintain.
* Designed for extension at all levels in the architecture. This allows the user to create more sophisticated graphics and new objects by having clearly defined extension points.

While the `davinci-eight` package has different design objectives, the programming metaphor is very similar to `three`.

==== Try It

Here is an example of some of the out-of-the-box components available.

[#graphics-using-webgl]
.Graphics using the @geometryzen/eight WebGL Library
image::book/05-application-libraries/images/eight-output.png[width=400,height=400]

You can try the application at the following URL:

https://www.stemcviewer.com/gists/b58dd9a292ab3c34044a6231d7c00b4a

The code for this example can be found at the following URL:

https://www.stemcstudio.com/gists/b58dd9a292ab3c34044a6231d7c00b4a

==== Configuration

The `package.json` file in your project must include a dependency on `davinci-eight`.

[source,json,linenos]
._package.json_
----
include::https://gist.githubusercontent.com/stemcstudio/b58dd9a292ab3c34044a6231d7c00b4a/raw/package.json?cache_bust='{revdatetime}'[]
----

There is no need to add an override to the `studio.config.json` file because the `davinci-eight` package is fully compatible with STEMCstudio.

Inspection of the generated `system.config.json` file will reveal that the runtime module is defined using the following mapping: 

[source,json,linenos]
._system.config.json_
----
include::https://gist.githubusercontent.com/stemcstudio/b58dd9a292ab3c34044a6231d7c00b4a/raw/system.config.json?cache_bust='{revdatetime}'[]
----

Likewise, in the `types.config.json` file the type definitions are defined using the following mapping:

[source,json,linenos]
._types.config.json_
----
include::https://gist.githubusercontent.com/stemcstudio/b58dd9a292ab3c34044a6231d7c00b4a/raw/types.config.json?cache_bust='{revdatetime}'[]
----

==== How It Works

We'll look at a slightly simpler example to understand how the various parts fit together:

https://www.stemcstudio.com/gists/394d7777f6d3c37bd6fc6a1fe35748bf

The _index.html_ file is quite simple. We essentialy need an HTML _canvas_ element on which to construct a WebGL _Rendering Context_.

[source,html,linenos]
._index.html_
----
include::https://gist.githubusercontent.com/stemcstudio/394d7777f6d3c37bd6fc6a1fe35748bf/raw/index.html?cache_bust='{revdatetime}'[]
----

The _index.ts_ file looks a bit daunting. Let's break it down. The _Engine_ is constructed on the HTML _canvas_ element. This essentially says that we are going to use the _canvas_ element for _WebGL_ purposes. We then create a _PerspectiveCamera_ and a _DirectionalLight_. These are not part of the scene but they do modify the appearance of the scene. Each of these objects implements a _Facet_ interface that provides information when the scene is rendered. The various facets are collected in an _ambients_ array for use during rendering. The _TrackballControls_ instance is an adapter that takes events from your pointer device and modifies the state of the camera. A `Drawable` Box is constructed. The appearance of the Box can be changed by setting various `BoxOptions`. Rendering is performed by the _animate_ function, which calls the `render` method of the `Box`.

[source,ts,linenos]
._index.ts_
----
include::https://gist.githubusercontent.com/stemcstudio/394d7777f6d3c37bd6fc6a1fe35748bf/raw/index.ts?cache_bust='{revdatetime}'[]
----

==== Extending the Library

In this example we will take a look at one way in which the library can be extended to create new objects. 

NOTE: In this case the extension is defined in a STEMCstudio project and so can only be used by this project. However, you could write the extension into an external library.

NOTE: You can also extend the library by creating new `Facet`(s). The `PerspectiveCamera` and `DirectionalLight` are examples of predefined `Facet`(s).

[source,ts,linenos]
._index.ts_
----
include::https://gist.githubusercontent.com/stemcstudio/5094b8bb697395b847d736d94a1d9299/raw/index.ts?cache_bust='{revdatetime}'[]
----


[source,glsl,linenos]
._vs.glsl_
----
include::https://gist.githubusercontent.com/stemcstudio/5094b8bb697395b847d736d94a1d9299/raw/vs.glsl?cache_bust='{revdatetime}'[]
----

[source,glsl,linenos]
._fs.glsl_
----
include::https://gist.githubusercontent.com/stemcstudio/5094b8bb697395b847d736d94a1d9299/raw/fs.glsl?cache_bust='{revdatetime}'[]
----
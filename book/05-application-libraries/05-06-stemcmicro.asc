=== Symbolic Mathematics using STEMCmicro

Using Symbolic Mathematics in an educational activity provides the opportunity to create more interesting problems. 

Up till now this has been achieved by using specialized LMS plugins that invoke remote servers to transform expressions e.g. STACK. In STEMCstudio, the approach taken is to use a library that runs in the web browser. The ideas behind this new approach are to provide greater flexibility, to avoid the scaling issues caused by multiple users, and avoid the installation and versioning issues with a server-side implementation.  

The definition of *Symbolic Mathematics* is rather broad. In the context of authoring STEMC educational activities, we may be interested in being able to verify that the input from a student matches some expression without regard to ambiguities in the ordering of terms and factors. One way to do this is to take advantage of the fact that symbolic mathematics processors typically normalize expressions and convert them to a canonical representation. This will be the focus of this example.

There are several JavaScript libraries available, each with its own strengths and weaknesses. In this example we will look at a library that is still under development that aims to fulfill this niche.

Our demonstration example allows the user to enter a mathematical expression. The parsed and normalized expression tree is then rendered in multiple formats: 

[#symbolic-math-output]
.Rendering a Mathematical Expression
image::book/05-application-libraries/images/symbolic-math-output.png[]

You can try the application at the following URL:

https://www.stemcviewer.com/gists/245c2b741744231399306226113a576c

The code for this example can be found at the following URL:

https://www.stemcstudio.com/gists/245c2b741744231399306226113a576c

Adding _stemcmicro_ to your project is rather easy because _stemcmicro_ natively supports the _system_ runtime format and the TypeScript type definitions are generated and bundled with the NPM package. Simply search for _stemcmicro_ when adding the dependency. Once found, the dependency will be added to the _package.json_ file of your project.

[source,json,linenos]
._package.json_
----
include::https://gist.githubusercontent.com/stemcstudio/245c2b741744231399306226113a576c/raw/package.json?index.ts='{revdatetime}'[]
----

There are no overrides because the design-time and run-time artifacts are all in appropriate formats and locatable through the _stemcmicro_ package.json file. Hence, the _studio.config.json_ overrides property is empty.

[source,json,linenos]
._studio.config.json_
----
include::https://gist.githubusercontent.com/stemcstudio/245c2b741744231399306226113a576c/raw/studio.config.json?index.ts='{revdatetime}'[]
----

STEMCstudio determines how to locate the run-time (executable) JavaScript code and places that information in _system.config.json_.

[source,json,linenos]
._system.config.json_
----
include::https://gist.githubusercontent.com/stemcstudio/245c2b741744231399306226113a576c/raw/system.config.json?index.ts='{revdatetime}'[]
----

STEMCstudio determines how to locate the design-time TypeScript type definitions and places that information in _types.config.json_.

[source,json,linenos]
._types.config.json_
----
include::https://gist.githubusercontent.com/stemcstudio/245c2b741744231399306226113a576c/raw/types.config.json?index.ts='{revdatetime}'[]
----

The HTML file for this example has an HTMLInputElement for input and three HTMLDivElement(s) for output.

[source,html,linenos]
._index.html_
----
include::https://gist.githubusercontent.com/stemcstudio/245c2b741744231399306226113a576c/raw/index.html?index.ts='{revdatetime}'[]
----

The TypeScript file for the application simply uses the _stemcmicro_ package as a parser and renders the parsed output in various formats. 

[source,ts,linenos]
._index.ts_
----
include::https://gist.githubusercontent.com/stemcstudio/245c2b741744231399306226113a576c/raw/index.ts?index.ts='{revdatetime}'[]
----

There is much more that you can do with the _stemcmicro_ library.

The NPM page is https://www.npmjs.com/package/stemcmicro

The GitHub pages contain API documentation https://geometryzen.github.io/stemcmicro
[[appendix-consuming-esm]]
[appendix]
== Consuming ES6 Module format Libraries

=== Converting ES6 module format to System

STEMCstudio simulates ES6 modules by transpiling code to the `System` format. The `System` format is functionally equivalent to the ES6 module format and so there is no loss in capability. 

NOTE: STEMCstudio does this so that it can execute code entirely in the browser without requiring a server-side capability to bundle code and serve it. Requiring a server-side capability per user can amount to expensive cloud computing resources.

STEMCstudio transpiles TypeScript files in your project on-the-fly into `System` format and can also do the same for external JavaScript libraries in ES6 module format. However, because external libraries are only loaded at execution time, the transpilation can impose a performance penalty. Moreover, the code that performs the transpilation, `typescript.js`, has to be available to the `System` loader, which would be done by adding a `script` tag to the HTML file:

```
<script src="https://path/to/typescript.js">
```

But `typescript.js` is a large (approx 10MB) file and so the loading of this file can be slow and can seriously increase the load time of your application. Using the `async` or `defer` attributes to control the load either does not work or does not affect the performance.

An additional problem that we may have with packages in ES6 module format is that the code is un-bundled. STEMCstudio is currently unable to consume these un-bundled packages.

=== Solution is System module format

Don't do at runtime what you can do at design time! More concretely, convert your ESM packages to `System` format up-front by creating a package that re-exports the artifacts of the original library in `System` format. Another benefit of this approach is that you can bundle the TypeScript type definitions into a file that can be readily consumed by STEMCstudio.

=== Wrapping their modules

In this section we take a look at a concrete example of wrapping an ES6 module. In the next section we'll look at how to consume it in STEMCstudio.

The `@microsoft/fast-components` library is in ES6 module format. It has been re-packaged and bundled into a package `@geometryzen/fast-components` in `System` format. You can explore this library at https://github.com/geometryzen/fast-components. Let's take a look at some of the more important aspects of this repository.

The _index.ts_ file simply re-exports everything in the original package. Nothing is subtracted or added:

[source,ts,linenos]
----
include::https://raw.githubusercontent.com/geometryzen/fast-components/main/src/index.ts?cache_bust='{revdatetime}'[]
----

The repository itself is similar in construction to those described in Appendix A. The _rollup.config.mjs_ file controls the artifacts that are generated. Notice that we only build the `System` module format.

[source,js,linenos]
----
include::https://raw.githubusercontent.com/geometryzen/fast-components/main/rollup.config.mjs?cache_bust='{revdatetime}'[]
----

In the _package.json_ file, the `browser` property replaces the `main` property to show that the module is meant to be used client-side. 

WARNING: By pointing the `browser` property to the minified `System` JavaScript file, the _unpkg.com_ CDN will return this file by default. This is undocumented so we should be careful not to rely on it.

[source,json,linenos]
----
include::https://raw.githubusercontent.com/geometryzen/fast-components/main/package.json?cache_bust='{revdatetime}'[lines=1..9]
----

=== Consuming your package

If you were to look at the _package.json_ file for `@microsoft/fast-components` then you would see that the package has regular _dependencies_ on various other `@microsoft/fast-*` packages. Because these are not _peerDependencies_, we can expect that the package embeds the code from other packages. Thus, if we consume the module `@geometryzen/fast-components` then we don't need to also import the other modules in order to ensure that our application runs correctly.

However, if you were to look at https://unpkg.com/@geometryzen/fast-components@0.9.6/dist/index.d.ts then you would see that the _index.d.ts_ file that is shipped with `@geometryzen/fast-components` imports from `@microsoft/fast-elements`, `@microsoft/fast-foundation`, and `@microsoft/fast-web-utilities`. So if we want a complete developer experience in the STEMCstudio IDE then we need to ensure that the typings files for these modules are available.

But how can we consume the `@geometryzen/fast-components` module to get the correct runtime behavior and at the same time get the corect developer experience in the STEMCstudio IDE?

The trick is to code our application _as if_ it is consuming the original `@microsoft/fast-*` modules, but map these modules onto the wrapped implementations. Let's look at an example that uses both `fast-components` and `fast-elements`.

You can study this project directly at https://www.stemcstudio.com/gists/ea1b221a5193f1731e5c7b2737999b24.

The main application file, _index.ts_, uses the `@microsoft/fast-components` module directly to register FAST custom components as well as a custom component that is defined in the _NameTag.js_ file.

[source,ts,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/ea1b221a5193f1731e5c7b2737999b24/raw/index.ts?cache_bust='{revdatetime}'[]
----

The _NameTag.ts_ file is using the `@microsoft/fast-element` module.

[source,ts,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/ea1b221a5193f1731e5c7b2737999b24/raw/NameTag.ts?cache_bust='{revdatetime}'[]
----

So we need both the `@microsoft/fast-components` and `@microsoft/fast-element` modules, and we need to map them to our `System` module implementations.

We also need the `@microsoft/fast-*` type definitions to be mapped to our `@geometryzen/fast-*` implementations. We map as many modules as we need to allow the STEMCstudio IDE to infer the types correctly.

We do this in _studio.config.json_.

[source,json,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/ea1b221a5193f1731e5c7b2737999b24/raw/studio.config.json?cache_bust='{revdatetime}'[]
----

=== Summary

We now understood the performance problem associated with loading external ES6 module packages and how to solve them by re-bundling in `System` format.
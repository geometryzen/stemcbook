=== Operator Overloading

==== What is Operator Overloading?

When you perform an arithmetic operation such as `2 + 2`, or `x + 1` where `x` is a `number` type, the JavaScript interpreter is able to quite happily perform the computation. But what happens if you want to define a mathematical object (such as a vector which is therefore not a primitive `number`), and you want that object to have sensible behavior when it interacts with mathematical operators? In other words, what we are trying to do is to give the operator additional behavior when it is encountered with certain operands, which is why it is called *operator overloading*.

==== How it Works

(((operator, overloading)))
Operator Overloading is typically performed by running JavaScript code through a transformation step that injects special code in place of normal operators. 

Operator Overloading is not implemented in standard JavaScript. The reason for this is that JavaScript performance would suffer because JavaScript does not provide type information for the runtime system to optimize code.

Experiments by a number of implementers show the surprising result that such a bolt-on Operator Overloading implementation only affects overall performance by around 5%. This makes it very acceptable in an education or research environment.

STEMCstudio implements operator overloading in this way, but also makes it possible to turn Operator Overloading on or off using a project-level switch.

STEMCstudio recognizes a wide range of operators for overloading, and by using a standard approach makes it possible for users to implement their own mathematical objects with operator overloading. In addition, STEMCstudio adjusts the precedence of operators to conform with the notation standards of Geometric Algebra so that parenthesis may be dropped for clarity.

==== Code transformation for Operator Overloading

In STEMCstudio, a special transformation step takes place after the TypeScript code has been transpiled to JavaScript. This step replaces operators by function calls that inspect their arguments for special dunder (double underscore) methods on objects. For example, suppose that we have the following TypeScript code:

```javascript
a + b
```

This code would be transformed to:

```javascript
add(a, b)
```

The `add` function takes two arguments `a`, and `b`. `add` is a standard function built into a library that is included by STEMCstudio if Operator Overloading is requested. The `add` function looks to see if `a` is an object and whether it has the special dunder method `__add__`. If so, the `add` function executes the code:

```javascript
a.__add__(b)
```  

The `__add__` method may veto the call (effectively saying that it cannot perform the action) by returning `undefined` (or `void 0`). If the method invocation is not vetoed and a result is returned then this is the result of `a + b`. If the method invocation is vetoed then the `add` function will try:

```javascript
b.__radd__(a)
```

This is the right-addition version of the same `a + b` expression, except that `b` gets a chance to handle the execution. This left or right handed invocation of addition makes sense when you consider that one type may know about another but not the other way around.

Finally, if these special methods don't exist or the invocations are vetoed, the `add` function falls back to simply calling `a + b`. At this point, the JavaScript runtime takes over, possibly coercing the arguments of the `+` operator to `number` before performing the addition.

Operator Overloading exists for both binary operators and unary operators.

==== Binary Operators

The following table summarizes the binary operators, their meaning, and the dunder methods.
[width="100%"]
|=======
|`+`  | addition              | `\\__add__`    | `\\__radd__`
|`-`  | subtraction           | `\\__sub__`    | `\\__rsub__`
|`*`  | multiplication        | `\\__mul__`    | `\\__rmul__`
|`/`  | division              | `\\__div__`    | `\\__rdiv__`
|`<<` | left contraction      | `\\__lshift__` | `\\__rshift__`
|`>>` | right contraction     | `\\__rshift__` | `\\__rrshift__`
|`\|` | scalar product        | `\\__vbar__`   | `\\__rvbar__`
|`^`  | exterior product      | `\\__wedge__`  | `\\__rwedge__`
|`===`| equality              | `\\__eq__`     | `\\__req__`
|`!==`| inequality            | `\\__ne__`     | `\\__rne__`
|`>=` | greater than or equal | `\\__ge__`     | `\\__rge__`
|`>`  | greater than          | `\\__gt__`     | `\\__rgt__`
|`\<=`| less than or equal    | `\\__le__`     | `\\__rle__`
|`<`  | less than             | `\\__lt__`     | `\\__rlt__`
|=======

==== Unary Operators

The following table summarizes the unary operators, their meaning, and the dunder method.

[width="100%"]
|=======
|`~`  | reversion        | `\\__tilde__`
|`!`  | inverse          | `\\__bang__`
|`-`  | unary minus      | `\\__neg__`
|`+`  | unary plus       | `\\__pos__`
|=======

==== Operator Precedence

When Operator Overloading is enabled in STEMCstudio, the precedence of operators is adjusted to conform to the norms for geometric algebra. In particular, the contraction operators and scalar product bind to their arguments the most tightly. The exterior or wedge product binds less tightly but more tightly than multiplication. As always, multiplication binds more tightly than addition. If in doubt, or the expression is esoteric, use parenthesis. However, as in mathematics notation, precedence rules exist to make mathematical expressions more readable.

===== Example Complex number class

The following complex number class implements binary addition, binary multiplication, and unary minus. 

[source,ts,linenos]
----
include::https://gist.githubusercontent.com/stemcstudio/5809fc601294b38a725bd4e8b0537313/raw/Complex.ts?cache_bust='{revdatetime}'[]
----

Notice that the dunder methods do not mutate their object instance (`this`). This results in expected behavior and is strongly recommended. In contrast, you may sometimes wish to make mathematical objects mutable. This should only be done in performance critical applications such as graphics where the creation of temporary objects would result in extra work for the JavaScript garbage collector. Even in such cases, the dunder methods should not mutate, but you may define non-dunder custom methods that do.

In general you should make your mathematical objects immutable so that operations do not have side-effects and make it easy to reason about values.
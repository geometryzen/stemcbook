=== Rendering Mathematics with KateX

KaTeX is mathematical markup rendering library developed by Khan Academy.

https://katex.org

Using KaTeX in STEMCstudio is fairly straightforward. There are two use cases to consider: `auto rendering` and `manual rendering`.

==== KaTeX auto rendering

In `auto-rendering`, KaTeX is being used to transform TeX syntax that is embedded in your `index.html` document into MathML (Mathematics Markup Language) that can be rendered by the browser. To do this you should use the Auto-render extension as described in https://katex.org/docs/autorender.html

Implementing auto rendering is a matter of following the KaTex auto rendering documentation by adding appropriate `link` and `script` tags to your `index.html` file as follows:

[source,html,linenos]
._index.html_
----
include::https://gist.githubusercontent.com/stemcstudio/d36b89fde29ed60774d71f5af64c39cd/raw/index.html?cache_bust='{revdatetime}'[]
----

You can try the application at the following URL:

https://www.stemcviewer.com/gists/d36b89fde29ed60774d71f5af64c39cd

The code for this example can be found at the following URL:

https://www.stemcstudio.com/gists/d36b89fde29ed60774d71f5af64c39cd

==== KaTeX manual rendering

When rendering some TeX string in your JavaScript code so that it is visible in your HTML page you will need to use the KaTeX API directly. Unfortunately, KaTeX is not distributed in a module format that is compatible with STEMCstudio. This can be resolved by using a wrapper package around the KaTeX page that exposes the code in `system` format. Such a package already exists and is called `@geometryzen/katex`.

Implementing KaTeX manual rendering in your application involes the following steps.

1. Add `katex` as a dependency to `package.json`
2. Create an override in `studio.config.json` to replace the runtime with `@geometryzen/katex`.
3. Define the element in your HTML where you want to output MathML.
4. Write the code to render your TeX string into the HTML element.

Here is what that looks like in the various files:

[source,json,linenos]
._package.json_
----
include::https://gist.githubusercontent.com/stemcstudio/005b55eee6797297dd7b056597726f12/raw/package.json?cache_bust='{revdatetime}'[]
----

[source,json,linenos]
._studio.config.json_
----
include::https://gist.githubusercontent.com/stemcstudio/005b55eee6797297dd7b056597726f12/raw/studio.config.json?cache_bust='{revdatetime}'[]
----

NOTE: You only need to override the `system` property that affects the runtime. STEMCstudio is able to find TypeScript type definitions for KaTeX in the package `@types/katex`.

TIP: You can find a version of `@geometryzen/katex` to use from the https://www.npmjs.com site.

[source,html,linenos]
._index.html_
----
include::https://gist.githubusercontent.com/stemcstudio/005b55eee6797297dd7b056597726f12/raw/index.html?cache_bust='{revdatetime}'[]
----

[source,ts,linenos]
._index.ts_
----
include::https://gist.githubusercontent.com/stemcstudio/005b55eee6797297dd7b056597726f12/raw/index.ts?cache_bust='{revdatetime}'[]
----

You can try the application at the following URL:

https://www.stemcviewer.com/gists/005b55eee6797297dd7b056597726f12

The code for this example can be found at the following URL:

https://www.stemcstudio.com/gists/005b55eee6797297dd7b056597726f12

==== KaTeX manual rendering a third way

NOTE: KaTeX is an example of a library that does not expose a granular API. This makes it feasible to entirely encapsulate the KaTeX API using a library that defines its own API. We haven't done this in the case of KaTeX because the TypeScript type definitions work quite well with STEMCstudio and have good JSDoc comments which futher enhances the STEMCstudio developer experience.  

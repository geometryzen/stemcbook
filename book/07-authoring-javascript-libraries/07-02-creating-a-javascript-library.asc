=== Creating a JavaScript Library

(((Library, Creating)))
I find it easier to create my GitHub repository first. Let's do that.

Sign into GitHub as the account that will own the library. In my case the owner is `geometryzen`.

Select the `Repositories` tab.

Click the `New` button.

Give the repository a name. e.g. `stemcstudio-my-lib`.

Add a `README.md` file by checking the check box.

Choose a license.

Click the `Create repository` button. The repository will be created with a `LICENSE` file and `README.md` file.

Click the `Code` button and copy the SSH URL to the clipboard.

Open a new terminal. Navigate to the folder that you want to be the parent of your local repository folder. Clone the repository by executing a command similar to the following. 

NOTE: The SSH URL may be pasted from the clipboard.

```
git clone git@github.com:geometryzen/stemcstudio-my-lib.git
```

Change directory to enter the repository folder.

```
cd stemcstudio-my-lib
```

Initialize npm to create the `package.json` file.

```
npm init
```

Accept the defaults and/or make any changes. You will be able to update the values later.

Now is a good time to fire up your favorite Integrated Development Environment (IDE). Mine is Visual Studio Code.

```
code .
```

Install TypeScript as a development dependency.

```
npm i -D typescript
```

Create the `tsconfig.json` file with the command:

```
npx tsc --init
```

Modify the contents of the `tsconfig.json` file to have the following property values.

```
{
    "compilerOptions": {
        "target": "es6",
        "module": "es6",
        "moduleResolution": "node",
        "declaration": true,
        "emitDeclarationOnly": true,
        "sourceMap": true,
        "outDir": "build",
        "declarationDir": "types",
        "esModuleInterop": true,
        "forceConsistentCasingInFileNames": true,
        "strict": true,
        "noImplicitAny": true,
        "strictNullChecks": false,
        "noImplicitThis": true,
        "noUnusedLocals": true,
        "noUnusedParameters": false,
        "noImplicitReturns": true,
        "skipLibCheck": true
    }
}}
```

It's now time to start adding some implementation source files. Let's create the source folder and add an empty TypeScript file.

```
mkdir src
cd src
touch index.ts
cd ..
```

Modify the `index.ts` file to have the following content. This will enable us to test a thin vertical slice from our library to STEMCstudio.

```
export function hello(name: string): void {
    console.log(`Hello, ${name}`);
}
```

We'll now verify that it builds correctly by adding a script to `package.json`.

```
  "scripts": {
    "build": "tsc",
    "test": "echo \"Error: no test specified\" && exit 1"
  },

```

Now execute the following command.

```
npm run build
```

This should create a file `index.d.ts` in the `types` folder with the contents...

```
export declare function hello(name: string): void;
```

==== Module Formats and Bundling.

It's now time to install packages associated with `rollup`, define a configuration file `rollup.config.js` and wire it all together. Let's start with creating the configuration file in the project root.

```
touch rollup.config.js
```

Give this file the following contents

```
/* eslint-disable no-undef */
/* eslint-disable @typescript-eslint/no-var-requires */
import commonjs from '@rollup/plugin-commonjs';
import resolve from '@rollup/plugin-node-resolve';
import typescript from '@rollup/plugin-typescript';
import dts from 'rollup-plugin-dts';
// import { terser } from 'rollup-plugin-terser';
import external from 'rollup-plugin-peer-deps-external';

const packageJson = require('./package.json');

export default [
    {
        input: 'src/index.ts',
        output: [
            {
                file: packageJson.browser,
                format: 'umd',
                sourcemap: true,
                name: "stemcstudioMechanicsJsxGraph",
            },
            {
                file: packageJson.main,
                format: 'cjs',
                sourcemap: true,
                name: 'stemcstudioMechanicsJsxGraph'
            },
            {
                file: packageJson.module,
                format: 'esm',
                sourcemap: true
            },
            {
                file: packageJson.system,
                format: 'system',
                sourcemap: true
            }
        ],
        plugins: [
            external(),
            resolve(),
            commonjs(),
            typescript({ tsconfig: './tsconfig.json' }),
            // terser()
        ]
    },
    {
        input: 'dist/esm/index.d.ts',
        output: [{ file: packageJson.types, format: "esm" }],
        plugins: [dts()],
    }
]
```

Install the rollup related packages

```
npm i -D @rollup/plugin-commonjs
npm i -D @rollup/plugin-node-resolve
npm i -D @rollup/plugin-typescript
```

```
npm i -D rollup-plugin-dts
```

```
npm i -D rollup-plugin-terser
```

```
npm i -D rollup-plugin-peer-deps-external
```

Now lets fix up some properties in `package.json` that are referenced from `rollup.config.js`

```
{
  "name": "stemcstudio-my-lib",
  "version": "1.0.0",
  "description": "STEMCstudio My Library",
  "browser": "dist/umd/index.js",
  "main": "dist/cjs/index.js",
  "module": "dist/esm/index.js",
  "system": "dist/system/index.js",
  "types": "dist/index.d.ts",
```

Finally, change the build script in `package.json` to read

```
"build": "rollup -c"
```

Let's give our bundled build a try...

```
npm run build
```

The `dist` folder should now contain subfolders for the formats `cjs`, `esm`, `system`, and `umd`. Each of those folders should contain at least an `index.js` file, which is the bundled implementation. The `dist` folder should also contain an `index.d.ts` file, which is our bundled type definitions.

==== Publishing

We're now almost ready to publish.

```
npm pack
```

```
    "files": [
        "/dist"
    ],
```

```
npm pack
```

```
touch .npmignore
```

```
src/
types/
rollup.config.js
tsconfig.json
dist/cjs/index.d.ts
dist/esm/index.d.ts
dist/system/index.d.ts
dist/umd/index.d.ts
```

```
rm stemcstudio-my-lib-1.0.0.tgz
```

```
npm publish
```

```
https://unpkg.com/@stemcstudio/my-lib@1.0.0/dist/cjs/index.js
```

```
https://unpkg.com/@stemcstudio/my-lib@1.0.0/dist/esm/index.js
```

```
https://unpkg.com/@stemcstudio/my-lib@1.0.0/dist/system/index.js
```

```
https://unpkg.com/@stemcstudio/my-lib@1.0.0/dist/umd/index.js
```

```
https://unpkg.com/@stemcstudio/my-lib@1.0.0/dist/index.d.ts
```

`system.config.json`

```
{
    "map": {
        "my-lib": "https://unpkg.com/@stemcstudio/my-lib@1.0.0/dist/system/index.js"
    }
}
```

`types.config.json`

```
{
    "map": {
        "my-lib": ["https://unpkg.com/@stemcstudio/my-lib@1.0.0/dist/index.d.ts"]
    }
}
```

`index.ts`

```
import { hello } from "my-lib"

hello("geometryzen")
```